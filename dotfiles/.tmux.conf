# set -g pane-border-bg colour235
# set -g pane-border-fg colour238
# set -g pane-active-border-bg blue
# set -g pane-active-border-fg blue



############################################################################
# PREFIX
############################################################################

# set Ctrl-a as the default prefix key combination
# and unbind C-b to free it up
set -g prefix C-a
unbind C-b  # unbind default leader key

# use send-prefix to pass C-a through to application
bind C-a send-prefix


############################################################################
# GLOBALS
############################################################################

# use UTF8
set -g utf8
set-window-option -g utf8 on

# make tmux display things in 256 colors
set -g default-terminal "screen-256color"

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# VI mode
set-option -g status-keys vi
set-window-option -g mode-keys vi

# set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

# display messages for 2 seconds
set -g display-time 1000

# prevent tmux to rename windows
set -g set-titles off
setw -g automatic-rename off
set-option -g allow-rename off

# Enable activity Alerts 
set-window-option -g monitor-activity on
set -g visual-activity on

# Automatically re-number windows after one of them is closed
set -g renumber-windows on

# Pass xterm-style keys to make many key combinations work as expected
setw -g xterm-keys on

# Shorten command delay. This increases Vim responsiveness. (milliseconds)
set -sg escape-time 1

# fit pane to minimal size for shared session
setw -g aggressive-resize on

# how long to show pane numbers 
set -g display-panes-time 1500 # (which is 1.5sec)

############################################################################
# RELOAD CONFIG
############################################################################

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Tmux Config Reloaded!"

############################################################################
# BINDINGS 
############################################################################

# Make Prefix + 0 go to window number 10
bind 0 select-window -t :10

# use PREFIX | to split window horizontally and PREFIX - to split vertically
bind | split-window -h
bind - split-window -v
unbind '"' # unbind horizontal split
unbind % # unbind vertical split

# Need to test
# bind | split-window -h -c "#{pane_current_path}"
# bind - split-window -v -c "#{pane_current_path}"

# Easy pane resizing with Prefix + Alt-h/j/k/l
bind -r M-h resize-pane -L 5
bind -r M-j resize-pane -D 5
bind -r M-k resize-pane -U 5
bind -r M-l resize-pane -R 5

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

############################################################################
# EXTRAS
############################################################################

# Do not display the original window’s name when renaming it via Prefix + ,
# This makes renaming faster
bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"
# Do the same for session names
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# Make Prefix + f search only in window names (-N), 
# not in titles (-T) or contents (-C)
bind f command-prompt -p "(find-window)" "find-window -N '%%'"

# Toggle pane synchronization with Prefix + S
bind S set synchronize-panes

# VIM copy mode
bind -t vi-copy v begin-selection
bind -t vi-copy C-v rectangle-toggle
bind -t vi-copy y copy-pipe "xclip -filter -selection clipboard | xclip -selection primary"

# Highend windows listing
# bind w choose-tree -u
# bind w choose-tree -u -W '#{window_index}(#{window_panes}): #{window_name} #{session_attached,yes,} #{pane_current_path} #F'

############################################################################
# NAVIGATION
############################################################################

# Maximize and restore a pane
unbind Up 
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# Movement of windows with Prefix + < and Prefix + >
bind -r < swap-window -t -1
bind -r > swap-window -t +1

# Refine Layout
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window

############################################################################
# Tmux / Vim Change Panes
############################################################################

# Works with vim-tmux-navigator in VIM
# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

bind -n C-Left  run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-Down  run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-Up    run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-Right run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

############################################################################
# MOUSE CONTROL
############################################################################

# tmux < 2.1
#setw -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on
#set -g mouse-select-window on

# tmux 2.1
set-option -g mouse on

# Need to be tested. Let the terminal emulator have the control
## tmux < v2.1:
#if-shell "[[ `tmux -V | cut -d' ' -f2` -lt 2.1 ]]" "setw -g mode-mouse off"
## tmux >= v2.1:
#if-shell "[[ `tmux -V | cut -d' ' -f2` -ge 2.1 ]]" "setw -g mouse off"

############################################################################
# POWERLINE
############################################################################
run-shell "powerline-daemon -q"
source ~/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf
set-option -g default-terminal "screen-256color"










############################################################################
############################################################################
############################################################################
############################################################################
############################################################################
 
# # use M-c M-c to switch to last window
# bind M-c last-window
# # M-c t to kill-pane
# bind -r t kill-pane
# # kill all other panes but the current one
# bind T confirm-before "kill-pane -a"
# # kill current window
# #bind -r x kill-window
# # kill all the other windows but the current one
# bind X confirm-before "kill-window -a"
# # prevoius/next-window
# bind -r Tab next-window
# bind -r C-Tab previous-window
# 
# # Vertial split-window from current dir
# bind -r v split-window -h -c "#{pane_current_path}"
# bind -r \ split-window -h -c "#{pane_current_path}"
# # Horizontal split-window from current dir
# bind -r h split-window -c "#{pane_current_path}"
# bind -r - split-window -c "#{pane_current_path}"
# # create new window #from the current dir
# bind c new-window # -c "#{pane_current_path}"
# 
# # copy the text in terminal using the following method:(not need to go into the copy mode first)
# # hold Shift and using touchpad/mouse tmux kill-pane -aselect the text you want
# # press C-S-c at the same time to copy, the text will be filled into the X clipboard
# # C-S-v to paste
# 
# # use prefix+z to max/restore the current pane
# # prefix+M-z to max the other one, unzoomed the window if it is already zoomed
# bind M-z if-shell "[ #{window_zoomed_flag} -eq 1 ]" "resize-pane -Z" "last-pane \; resize-pane -Z"
# 
# # copy/paste between system clipboard and tmux
# set -g mouse on
# # toggle mouse on/off
# bind m set -g mouse
# # prefix+[ first, select the content with mouse(hold) and then copy using M-w,
# # paste using C-y, using prefix+[ will also solve the problem that
# # selecting multiple lines with mouse selects contents cross panes.
# # To copy:
# #bind-key -n -t emacs-copy M-w copy-pipe "xclip -i -sel p -f | xclip -i -sel c "
# bind-key -n -Tcopy-mode M-w send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c "\; display-message "Copied"
# # To paste:
# bind-key -n C-y run "xclip -o | tmux load-buffer - ; tmux paste-buffer"
 






############################################################################
############################################################################
############################################################################
############################################################################






############################################################################
# Status Bar
############################################################################
#set-option -g status-utf8 on
#set-option -g status-justify right
#set-option -g status-bg black # colour213 # pink
#set-option -g status-fg cyan
#set-option -g status-interval 5
#set-option -g status-left-length 30
#set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#T#[default]'
#set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d ',' -f 2)#[default]'
#set-option -g visual-activity on
#
## Titles (window number, program name, active (or not)
#set-option -g set-titles on
#set-option -g set-titles-string '#H:#S.#I.#P #W #T'

############################################################################
# DISABLED
############################################################################


# map Vi movement keys as pane movement keys
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# and use C-h and C-l to cycle thru panes
# bind -r C-h select-window -t :-
# bind -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
# bind H resize-pane -L 5
# bind J resize-pane -D 5
# bind K resize-pane -U 5
# bind L resize-pane -R 5



############################################################################
# DON'T KNOW WHAT IT IS
############################################################################


# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
# bind C-j command-prompt "joinp"
# bind C-j command-prompt "join-pane"
# bind-key j command-prompt "join-pane -s '%%'"
# bind-key j command-prompt "joinp -t:0"
# bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split



############################################################################
# windows
############################################################################
# set-window-option -g window-status-current-bg red
# bind C-j previous-window
# bind C-k next-window
# bind-key C-a last-window # C-a C-a for last active window
# bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
# setw -g aggressive-resize on

# Resizing ---------------------------------------------------------------
# bind-key C-h resize-pane -L
# bind-key C-j resize-pane -D
# bind-key C-k resize-pane -U
# bind-key C-l resize-pane -R



############################################################################
# COLORS Cfg 01
############################################################################

# ----------------------
# set some pretty colors
# ----------------------
# set pane colors - hilight the active pane
# set-option -g pane-border-fg colour235 #base02
# set-option -g pane-active-border-fg colour240 #base01

# colorize messages in the command line
# set-option -g message-bg black #base02
# set-option -g message-fg brightred #orange

# ----------------------
# Status Bar
# -----------------------
# set-option -g status on                # turn the status bar on
# set -g status-utf8 on                  # set utf-8 for the status bar
# set -g status-interval 5               # set update frequencey (default 15 seconds)
# set -g status-justify centre           # center window list for clarity
# set-option -g status-position top    # position the status bar at top of screen

# visual notification of activity in other windows
# setw -g monitor-activity on
# set -g visual-activity on

# set color for status bar
# set-option -g status-bg colour235 #base02
# set-option -g status-fg yellow #yellow
# set-option -g status-attr dim 

# set window list colors - red for active and cyan for inactive
# set-window-option -g window-status-fg brightblue #base0
# set-window-option -g window-status-bg colour236 
# set-window-option -g window-status-attr dim

# set-window-option -g window-status-current-fg brightred #orange
# set-window-option -g window-status-current-bg colour236 
# set-window-option -g window-status-current-attr bright

# show host name and IP address on left side of status bar
# set -g status-left-length 70
# set -g status-left "#[fg=green]: #h : #[fg=brightblue]#(curl icanhazip.com) #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "

# show session name, window & pane number, date and time on right side of
# status bar
# set -g status-right-length 60
# set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]:: %d %b %Y #[fg=green]:: %l:%M %p :: #(date -u | awk '{print $4}')::"

